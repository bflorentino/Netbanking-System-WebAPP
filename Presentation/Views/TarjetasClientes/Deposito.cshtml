@model Bussiness.Model.BindingModel.PagoDepositoBindingModel

@{
    Layout = "_LayoutClientes";
}

<link rel="stylesheet" href="/css/PoPupWindow.css" />
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro&display=swap" rel="stylesheet">
<link rel="stylesheet" href="/css/PoPupWindow.css" />
<link rel="stylesheet" href="/css/dataFormClientes.css"/>

<link rel="stylesheet" href="/css/PoPupWindow.css" />

<div class= "data-container">

<div class = "cuentasContainer">
    <h1>Seleccione una cuenta de ahorro</h1>
    @{
        foreach(string cuenta in ViewBag.cuentas)
        {
            <input type="button" value="@cuenta" onclick="insertAccount(this.value);">
        }
    } 

    <h1>Selecciona una tarjeta de crédito</h1>
    @{
        foreach(string tarjeta in ViewBag.tarjetas)
        {
            <input type="button" value="@tarjeta" onclick="GetBalanceDisponible(this.value);">
        }
    } 
</div>

<form action="Deposito" method = "post">
<div class="form-data">
<h1 class="form-title">Depósito bancario</h1>

<div class="field">
        @Html.LabelFor(deposito => deposito.TarjetaOrigen)
        @Html.EditorFor(deposito => deposito.TarjetaOrigen, new {htmlAttributes = new {@class="input-text", id = "tarjetaDestino", @readonly = "readonly"} })
        @Html.ValidationMessageFor(deposito=> deposito.TarjetaOrigen, "", new {@class = "error-message"})
</div>

<div class="field">
        @Html.LabelFor(deposito => deposito.CuentaDestino)
        @Html.EditorFor(deposito => deposito.CuentaDestino, new {htmlAttributes = new {@class="input-text", id = "cuentaOrigen", @readonly = "readonly"} })
        @Html.ValidationMessageFor(deposito=> deposito.TarjetaOrigen, "", new {@class = "error-message"})
</div>

<div class="field">
        @Html.LabelFor(deposito => deposito.MontoTarjeta)
        @Html.EditorFor(deposito => deposito.MontoTarjeta, new {htmlAttributes = new {@class="input-text", id = "balanceTarjeta", @readonly = "readonly"} })
        @Html.ValidationMessageFor(deposito=> deposito.MontoTarjeta, "", new {@class = "error-message"})
</div>

<div class="field">
        @Html.LabelFor(tarjeta => tarjeta.MontoAPagar)
        @Html.EditorFor(tarjeta => tarjeta.MontoAPagar, new {htmlAttributes = new {@class="input-text"} })
        @Html.ValidationMessageFor(tarjeta=> tarjeta.MontoAPagar, "", new {@class = "error-message"})
</div>
    <input type="button" value="Realizar depósito" class="submit-button" id="open" />
</div>    
        <div class="modal-cont" id="modal-cont">
        <div class="modal">
        <h1>Nuevo Cliente</h1>
        <br />
        <p>¿Desea realizar el depósito? 
        </p>
        <br />
        <input type="submit" value="SI" class="yes pop" id="enviar"> 
        <input type="button"  value="NO" class="no pop" id="cerrar"/>
        </div>
    </div>
</form>

</div>
@{
    if (ViewBag.Response != null)
{
        <div class="modal-cont show" id="modalResponse">
        <div class="modal">
        <h1>Respuesta del servidor</h1>
        <p>@ViewBag.Response</p>
        <input  type="button" value="Cerrar" class="no pop" id="cerrarResponse"> 
        </div>
    </div>
}
}
<script src="~/js/Cuentas.js"></script>
<script src="~/js/FetchTarjetas.js"></script>
<script src="~/js/Popup.js"></script>